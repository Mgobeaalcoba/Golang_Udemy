En consola con el comando 

go build nombre_archivo.ext 

compilamos el archivo .go y creamos un ejecutable binario
que aparecerá en el mismo path. 

luego ejecutamos por consola el main.exe compilado así:

./main

o así: 

.\main.exe

Y se reproduce en consola el ...

Hola Mundo

------------------------------------------------

Si quiero compilar y ejecutar en un solo comando entonces: 

go run main.go

y...

Hola Mundo

Probando Gitmoji -

-------------------------------------------------

Dentro de un mismo proyecto/paquete no debo repetir los nombres de las funciones. Si deseo hacer eso tengo que crear subcarpetas adentro del proyecto. Y Golang va a entender a cada carpeta como un paquete. 

-------------------------------------------------

POO: 

1- Struct o class o modelo
2- Objetos o instanciaciones de la struct o modelo
3- Propiedades o atributos
4- Metodos o acciones
5- Constructores: (encapsulamiento) Cuando una struct publica tiene sus atributos privados, debemos establecer los mismos mediante la elaboración de una función constructora
6- Getter & Setter: (encapsulamiento) Cuando queremos acceder o cambiar atributos privados debemos construir funciones de tipo getter and setter para poder realizar ambas tareas. 
7- Polimorfismo: Interfaces: Ver reto modularizado, pero permite juntar en una unica función general los metodos de mismo nombre que tengan distintas structs. 

-------------------------------------------------

Funciones: 

1- Anonimas: aquellas que no tienen nombre. Pueden ser guardadas en variables y luego instanciadas de esa forma. 
2- Recursivas: funciones que se llaman a si mismas, por ejemplo la función para obtener el factorial de un numero
3- Variaticas: Son aquellas que reciben argumentos indefinidos
4- Closures: funciones que retornan otras funciones. Sirven para cambiar 1 parametro seteado como variable en el closure de forma distinta segun la ocasión. Ejemplo clasico: funcion repeat que se guarda como repeat3 o repeat10 segun la cantidad de veces que desee repetir una palabra o valor usando una función de tipo closure
5- defer function: funcion que se ejecuta al final del bloque de codigo en el que esté inserta. 

----------------------------------------------------

Importar modulos de terceros en Golang: 

Ejemplo con modulo "hellomod" de donvito:

Si no tengo un archivo go.mod creado entonces previamente debo: 

$ go mod init hello // el hello puede cambiar. En mi caso por paquetes.

$ go get github.com/donvito/hellomod

// Este comando crea en go.mod: 

require github.com/donvito/hellomod v1.0.1 // indirect

Luego: 

$ go build

$ ./hello

Hello World

---------------------------------------------------

Para crear paquetes en golang y poder usarlos tenemos que poner por consola:

go mod init paquetes

C:\Users\mgobea\go\src\CURSO-GOLANG\07-MODULARIZACION(main -> origin)
λ go mod init paquetes
go: creating new go.mod: module paquetes
go: to add module requirements and sums:
        go mod tidy

De esta forma se genera un archivo go.mod en la raiz donde lo creamos. En este caso 07-MODULARIZACION. Que le pone un nombre corto a esa ruta. En este caso paquetes. 

Luego puedo importar el paquete de allí dentro poniendo por ejemplo:

import paquetes/mensajes

-------------------------------------------------------------

Modificadores de acceso para nuestros paquetes: 

En Kotlin: Public / Private, etc. 

Si quiero que una función sea privada la declaro en minuscula. 

Si quiero que una función sea publica la declaro en mayuscula. 

privada significa que solo puedo acceder desde el propio paquete donde está el archivo

por ejemplo si dentro de "mensajes" creo un segundo archivo llamado "saludar2" podría acceder a las variables privadas de "saludar" pero por fuera del paquete no lo puedo hacer. 

-------------------------------------------------------------

Lecciones de la practica de modularizado: 

Si voy a consumir struct o interfaces desde otros modulos, tanto las structs como sus atributos y sus metodos deben comenzar con letra mayuscula para que puedan ser accedidos desde fuera del modulo. 

Caso contrario fracasará. 

Ver src/CURSO-GOLANG/RetoModularizado para mas detalle. 

Allí resolví el mismo reto que en src/CURSO-GOLANG/Retos/04-uso-interfaces pero en lugar de un solo archivo lo hice modularizando de forma profesional y efectiva. 

------------------------------------------------------------

Paso a paso para subir un modulo a github y que luego pueda ser importado por otros: 

1- Creo un repositorio en github
2- Creo la estructura de mi modulo independiente de otros archivos. Por ej: en geometrics puse los files con las structs de cuadrado y circulo ademas de la interface para manejar sus metodos compartidos. 
3- Luego voy a la terminal y: 

➜ echo "# geometrics_golang" >> README.md

➜ git init

➜ go mod init github.com/Mgobeaalcoba/geometrics_golang // Importante acá ponerle el nombre de la ruta de github, sin el html delante ni el .git detras. 

➜ git add .

➜ gitmoji -c | git commit -m "v1: geometrics golang module"

➜ git branch -M main

➜ git remote add origin git@github.com:Mgobeaalcoba/geometrics_golang.git

➜ git push -u origin main

// Modulo cargado :)